var fs             = require('fs');
var Gdax           = require('gdax');
var colors     	   = require('colors');
var path       	   = require('path');
var configfilename = path.basename(__filename);
var gdaxconfig     = require(__dirname+'/config/'+configfilename+'.config')
var userFeed       = require(__dirname+'/lib/UserFeed.js');
var tickerFeed     = require(__dirname+'/lib/TickerFeed.js');
var Advisor       = require(__dirname+'/lib/Advisor.js');
var Account        = require(__dirname+'/lib/Account.js');
var sprintf        = require('sprintf')
var columnify 	   = require('columnify')
var jsdiff 	   = require('diff');
var dryrun = false;

// *****************
var blessed 	   = require('blessed');
var contrib 	   = require('blessed-contrib');
var screen 	   = blessed.screen({
  smartCSR: false,
  fastCSR: true,
  replaceScreenOnNewData: true
});

screen.title = ' DryRun = '+dryrun;

var grid = new contrib.grid({rows: 40, cols: 40, screen: screen})

// Create a box perfectly centered horizontally and vertically.
var toppos=0;
	var r = 0;
	var c = 0;
	var w = 20;
	var h = 40
	var leftpos = 0;
	leftwindow = grid.set(r, c, h, w, blessed.Log, {
		  content: '',
		  tags: true,
		  label: "Left" ,
		  border: {
		    type: 'line'
		  },
		  style: {
		    fg: 'white',
		    //bg: 'black',
		    border: {
		      fg: '#f0f0f0'
		    },
		  },
		});

	rightwindow = grid.set(r, c+20, 40, 30, blessed.Log,{ 
		  content: '',
		  tags: true,
		  label: "dryrun "+ dryrun?"True":"False" ,
		  border: {
		    type: 'line'
		  },
		  style: {
		    fg: 'white',
		    //bg: 'black',
		    border: {
		      fg: '#f0f0f0'
		    },
		  },
	})
	screen.append(leftwindow);
	screen.append(rightwindow);
// Quit on Escape, q, or Control-C.
screen.key(['escape', 'C-c', 'q'], function(ch, key) {
	return process.exit(0);
});
screen.key(['c'], function(ch, key) {
	if( ! dryrun ){
		uf.authedClient.cancelAllOrders();
		leftwindow.insertBottom("canceled all orders");
	}else{
		leftwindow.insertBottom("DRYRUN: canceled all orders");
	}

});

screen.key(['u'], () => account.getAccount()) 

screen.key(['b'], buy) 

function buy(ch, key){
	var orderParams = {
		"type": "limit",
		"side": "buy",
		"post_only": true,
        	"price": Advice.buy,
                "size":  Advice.buy_size,
                "product_id": gdaxconfig.trade.buy_asset+'-'+gdaxconfig.trade.sell_asset
        } ;
	account.getAccount();
	try {
		setTimeout(placeOrder,5000,orderParams)
	}catch (e){
		leftwindow.insertBottom(e)
	}
}


screen.key(['s'], sell) 

function sell(ch, key) {
	var orderParams = {
		"type": "limit",
		"side": "sell",
		"post_only": true,
        	"price": Advice.ask,
                "size":  Advice.ask_size,
                "product_id": gdaxconfig.trade.buy_asset+'-'+gdaxconfig.trade.sell_asset
        };
	account.getAccount();
	setTimeout(placeOrder,5000,orderParams)
};
function placeOrder(orderParams) {
	leftwindow.insertBottom(JSON.stringify(orderParams))
	orderParams.size = Math.trunc(orderParams.size)
	leftwindow.insertBottom(JSON.stringify(orderParams))
	if(  dryrun ){
	  leftwindow.insertBottom(sprintf("DRYRUN %s price %s Size: %s",
	 	orderParams.side,
		orderParams.price,
		orderParams.size
		))
          return;
	}// End Dryrun
	if ( orderParams.size < gdaxconfig.minOrderSize )
		leftwindow.insertBottom(sprintf("%s order to small, no oder placed $%.02f size %02f",
				orderParams.side,
				orderParams.price,
				orderParams.size
				))
	else{
	    uf.authedClient.placeOrder(orderParams,(err,resp,data) => {
		leftwindow.insertBottom(sprintf("a %s price %s Size: %s",
			orderParams.side,
			orderParams.price,
			orderParams.size
		)) // insert
		if (err){
			leftwindow.insertBottom("ERROR: "+ err.message )
		} //End Error
	    } // End Callback
	   )// End Place Order
	} // End Else
	account.getAccount();
}
screen.key(['l'], function(ch, key) {
	//leftwindow.insertBottom("list");
	//leftwindow.insertBottom(JSON.stringify(uf.orders,null,1))
        uf.orders.forEach((o) => {	
	leftwindow.insertBottom(sprintf("%s price %.2f Size: %.4f",
                o.side,
                o.price,
                o.size
                ))
	})

	
});
/************************************************
****  Render the screen.
************************************************/
setInterval(function (){
	screen.render();
},400);

var Advice = new Advisor(gdaxconfig)
Advice.debugwindow = leftwindow
	
var account = new Account(gdaxconfig)
account.connect();
account.on("update", (data) => { Advice.update("account",data)})

/***************************************************************
account.on("update", (data) =>{
	leftwindow.insertBottom(JSON.stringify(data,null,4).red)
})
***************************************************************/
var tf = new tickerFeed(gdaxconfig)
tf.on("ticker", (data) =>{
        calculateBalance()
	Advice.update("ticker",data)
        rightwindow.setContent(JSON.stringify(data.current,null,4));
        rightwindow.insertBottom(sprintf("Advice Buy %.02f Sell %.02f", Advice.buy, Advice.ask).yellow);
        rightwindow.insertBottom(sprintf("Advice Buy size %.02f Sell size %.02f", Advice.buy_size, Advice.ask_size).yellow);
        showBalance(rightwindow)
	if( account.accounts )
	[ gdaxconfig.trade.buy_asset, 
	  gdaxconfig.trade.sell_asset].forEach((ast) => {
		if ( account.accounts.length > 0 ){
			a = account.accounts.find((d) => ast === d.currency )
			rightwindow.insertBottom(sprintf("%s balance %.4f available: %.4f hold: %.4f",
			    a.currency,
			    a.balance,
			    a.available,
			    a.hold,
			))
		}
        })
})

var uf = new userFeed(gdaxconfig)
uf.on("open", (data) => {
	account.getAccount();
})
uf.on("buy", (data)=>{
	leftwindow.insertBottom( sprintf("%s Buy order %s price %s",
		data.reason,
		data.order_id,
		data.price,
		).red)
	if ( data.reason === "filled" ){
		Advice.lastbuy = data.price
		account.getAccount();
		setTimeout(sell,10000);
	}
})
uf.on("sell", (data)=>{
	leftwindow.insertBottom( sprintf("%s Sell order %s price %s",
		data.reason,
		data.order_id,
		data.price,
		).blue)
	if ( data.reason === "filled" ){
		Advice.lastsell = data.price
		account.getAccount();
		setTimeout(buy,10000);
	}
})
uf.on("update", (data) =>{
	leftwindow.insertBottom(data)
})
uf.connect()
tf.connect()

var orders = []
var ticker = {}

/********************************
Update Orders and Update Account funds
*********************************/
var balance     = {}
var lastbalance = {}

calculateBalance = function (){
	lastbalance = balance
	balance[gdaxconfig.trade.buy_asset]  = 0
	balance[gdaxconfig.trade.sell_asset] = 0
	let bsAsset = gdaxconfig.trade.buy_asset+"-"+gdaxconfig.trade.sell_asset
        bs = uf.orders.filter((o) =>{ return o.product_id === bsAsset });
        for ( i=0;  i <  bs.length; i++){
                o = bs[i]
                if ( o.side === "sell" ){
                        balance[gdaxconfig.trade.buy_asset ] += parseFloat(o.size);
                        balance[gdaxconfig.trade.sell_asset] += parseFloat(o.size) * parseFloat(o.price);
                }else{
                        balance[gdaxconfig.trade.buy_asset ] += parseFloat(o.size);
                        balance[gdaxconfig.trade.sell_asset] += parseFloat(o.size) * parseFloat(o.price);
                }
        }
        /***********************************************************************************
         {
          "id": "c40c2ab3-d886-4c52-99aa-81614d4dd9a3",
          "currency": "USD",
          "balance": "588.5827056626442500",
          "available": "0.00000067324425",
          "hold": "588.5827049894000000",
          "profile_id": "431f183c-4714-4274-bb8a-3202d56678c2"
         }
         **********************************************************************************/
	if ( account && 
             account.accounts && 
             account.accounts.length > 0  ) {
		aba = account.accounts.find((a) => { return a.currency === gdaxconfig.trade.buy_asset  })
		asa = account.accounts.find((a) => { return a.currency === gdaxconfig.trade.sell_asset })
		balance[gdaxconfig.trade.buy_asset ] += aba.available
		balance[gdaxconfig.trade.sell_asset] += asa.available
	}
}
function showBalance(window){
	var diff = jsdiff.diffChars(JSON.stringify(lastbalance,null,4), JSON.stringify(balance,null,4));
	var o = ""
	for ( i = 0; i < diff.length; i++){
	    var color = diff[i].added ? 'green' : 'blue'
	    //diff[i].removed ? 'red' : 'grey';
	    if ( ! diff[i].removed ) o += diff[i].value[color];
	};
	window.insertBottom("Balance = "+o)
	//leftwindow.setContent(o)
}
